




;; skipping a few lines...




(defn mapattr
  [elem (pairs {...})]
  (ins
    (fn [x xs]
      (attr xs (first x) (first (rest x))))
    pairs
    elem))

(defn (dep {ref on})
  [elem]
  (do
    (def sym  (gensym nil))
    (def elem (attr elem (strcat ^"data-dep::" ref ^":" on) sym))
    (ins
      (fn [x xs]
        (cond
          [ (eq (first x) ^"ref") xs ]
          [ (eq (first x) ^"on") xs ]
          [ else (attr xs 
                       (strcat ^"data-" sym ^"::" (first x))
                       (first (rest x))) ]))
      (attrs arguments)
      elem)))

(defn dep2
  [elem ref on (args {...})]
  (do
    (def args (conj args [^"ref" ref] [^"on" on]))
    (conj (apply (quote (mapattr dep)) args) elem)))

(defn dep-status
  [ref elem]
  (dep2 elem
        ref
        ^"_status"
        [^"class.success"    ^"$$['_status'] == 'success'"]
        [^"class.error"      ^"$$['_status'] == 'error'"]
        [^"class.warning"    ^"$$['_status'] == 'warning'"]
        [^"class.disabled"   ^"$$['_status'] == 'disabled'"]))

(defn dep-state
  [ref elem]
  (ins
    conj
    [ (mapattr dep
               [^"ref"              ref]
               [^"on"               ^"_status"]
               [^"class.disabled"   ^"$$['_status'] == 'disabled'"])
      (mapattr dep
               [^"ref"              ref]
               [^"on"               ^"_value"]
               [^"value"            ^"$$['_value']"]) ]
    elem))

(defn (input-text {_name _label _message _help})
  []
  (do
    (def sym (gensym nil))
    (def inp (attr input ^"type" ^"text" ^"name" _name))
    (conj
      (attr div ^"data-name" sym)
      (conj
        (dep-status sym (div {class "control control-text"}))
        (dep-status sym (dep-state sym inp)))
      (dep2 (dep-status sym (p {class "message"}))
            sym
            ^"_message"
            [^"text" ^"$$['_message']"])
      (dep2 p sym ^"_help" [^"text" ^"$$['_help']"]))))


