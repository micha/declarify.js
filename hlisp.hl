




;; skipping a few lines...




(defn (dep {ref on})
  [elem]
  (do
    (def sym  (gensym nil))
    (log ^"sym1" sym)
    (log ^"sym2" sym)
    (def elem (attr elem (strcat ^"data-dep::" ref ^":" on) sym))
    (ins
      (fn [x xs]
        (cond
          [ (eq (first x) ^"ref") xs ]
          [ (eq (first x) ^"on") xs ]
          [ else (attr xs 
                       (strcat ^"data-" sym ^"::" (first x))
                       (first (rest x))) ]))
      (attrs arguments)
      elem)))

(defn dep-status
  [ref elem]
  (conj
    (attr dep ^"ref"              ref
              ^"on"               ^"_status"
              ^"class.success"    ^"$$['_status'] == 'success'"
              ^"class.error"      ^"$$['_status'] == 'error'"
              ^"class.warning"    ^"$$['_status'] == 'warning'"
              ^"class.disabled"   ^"$$['_status'] == 'disabled'")
    elem))

(defn dep-state
  [ref elem]
  (conj
    (attr dep ^"ref"              ref
              ^"on"               ^"_status"
              ^"class.disabled"   ^"$$['_status'] == 'disabled'")
    (conj
      (attr dep ^"ref"              ref
                ^"on"               ^"_value"
                ^"value"            ^"$$['_value']")
      elem)))

(defn (input-text {_name _label _message _help})
  []
  (do
    (def sym (gensym nil))
    (def inp (attr input ^"type" ^"text" ^"name" _name))
    (conj
      (attr div ^"data-name" sym)
      (conj
        (dep-status sym (div {class "control control-text"}))
        (dep-status sym (dep-state sym inp)))
      (dep-status sym (p {class "message"})))))


